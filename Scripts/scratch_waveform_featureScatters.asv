%%
clear all; close all; clc

recfin = readtable('/home/scott/Documents/PSR/Data/RecordingInfo.csv',...
    'Delimiter',',');       % read in recording info data

%%
bigTTP = [];
bigHLFDUR = [];
for rii = 1:size(recfin,1)
    loopClock = tic;
    fprintf('%% ======= RECORDING %d.%d ======= %%\n',...
        recfin.Subject_(rii),recfin.Recording_(rii));
    currDir = fullfile(recfin.Filepath_SharkShark_{rii},'kilosort4/');

    load(fullfile(currDir,'meanWFs.mat'),'meanWFs');
    ttp = []; hlfdur = []; % initialize vectors to hold data
    for ci = 1:size(meanWFs,1)
        [ttp(ci), hlfdur(ci)] = psr_spikeFeat(meanWFs(ci,:));
    end
    figure; scatter(hlfdur,ttp,'filled');
    ylabel('Trough to peak time (ms)')
    xlabel('Half-amplitude duration (ms)')
    xlim([0 0.6])
    ylim([0 1.5])
    ttlString = sprintf('Recording %d.%d',...
        recfin.Subject_(rii),recfin.Recording_(rii));
    bigTTP = [bigTTP; ttp'];
    bigHLFDUR = [bigHLFDUR; hlfdur'];

end

%% Scatter plot w/jitter === %%
Fs = 30000;                 % your sampling rate
dt_ms = 1000/Fs;            % 0.03333 ms per sample
rng(42);                    % reproducible jitter
jitterFrac = 0.5;           % fraction of one sample step (0.5 => ±Δt/2)
jx = (rand(size(bigHLFDUR)) - 0.5) * 2 * jitterFrac * dt_ms;
jy = (rand(size(bigTTP))    - 0.5) * 2 * jitterFrac * dt_ms;
xj = bigHLFDUR + jx;
yj = bigTTP    + jy;

% Keep physical values nonnegative (optional):
xj = max(xj, 0);
yj = max(yj, 0);

figure('Color','w');
scatter(xj,yj,'k','filled','MarkerFaceAlpha', 0.25, 'MarkerEdgeColor', 'none')
ylabel('Trough to peak time (ms)')
xlabel('Half-amplitude duration (ms)')
xlim([0 0.6])
ylim([0 1.5])

%%
bEdges = 0:dt:1.5;
figure; 
h = histogram2(bigHLFDUR,bigTTP,bEdges,bEdges,'FaceColor','flat');

%% Distribution estimate using Kernel density

%% 3) Smooth probability map via 2-D KDE (ksdensity)
% Scott's rule for 2-D bandwidth (min at half a sample step)
xj = ;
yj = ;
n = numel(xj);

bx = max(1.06*std(xj)*n^(-1/6), dt_ms/2);
by = max(1.06*std(yj)*n^(-1/6), dt_ms/2);

xlim_ = [0, prctile(xj, 99.5)*1.05];
ylim_ = [0, prctile(yj, 99.5)*1.05];

nx = 50; ny = 50;
xg = linspace(xlim_(1), xlim_(2), nx);
yg = linspace(ylim_(1), ylim_(2), ny);
[Xg, Yg] = meshgrid(xg, yg);

% Evaluate KDE on grid (PDF integrates to ~1 over domain)
F = ksdensity([xj yj], [Xg(:) Yg(:)], ...
    'Bandwidth', [bx by], ...
    'Support',   [0 0; Inf Inf], ...
    'Function',  'pdf');
F = reshape(F, ny, nx);

% Optional: normalize to sum(F)*ΔxΔy = 1 over the plotted grid
dx = xg(2)-xg(1); dy = yg(2)-yg(1);
F = F / (sum(F,'all') * dx * dy + eps);

%4) Plot KDE probability map + jittered scatter
% figure('Color','w','Position',[100 100 1100 420]);
figure;
imagesc(xg,yg,F);
set(gca,'YDir','normal');
%%
contourf(xg, yg, F, 14, 'LineColor','none'); axis xy; hold on;
colormap(subplot(1,2,1), parula); % or leave default
cb = colorbar; cb.Label.String = 'Probability density';
xlabel('Half-amplitude duration (ms)');
ylabel('Trough-to-peak (ms)');
title(sprintf('KDE map (bw = [%.3f, %.3f] ms)', bx, by));
% overlay a random subset to keep it readable
k = min(n, max(1500, round(0.1*n)));
% idx = randperm(n, k);
% scatter(xj(idx), yj(idx), 6, 'k', 'filled', ...
%     'MarkerFaceAlpha', 0.18, 'MarkerEdgeAlpha', 0.18);
% grid on;
xlim(xlim_); ylim(ylim_);
